collapse="\n")
})
eulerr_options(quantities=list(cex=.6))
plot(euler_fit,quantities=lab)
}
venn_belonging <- function(nameseries,Z,minZ){
nameseries=as.character(nameseries)
list_venn=do.call(c,lapply(1:(dim(Z)[2]),function(j){
res=list(nameseries[which(Z[,j]>minZ)],nameseries[which(Z[,j]< -minZ)])
names(res)=paste("Trend",j,c("+","-"),sep="")
res
}))
list_venn$Any =nameseries[!nameseries %in%unlist(list_venn)]
sapply(nameseries,function(ser)
paste(names(list_venn)[sapply(names(list_venn),
function(g) ifelse(ser %in% list_venn[[g]], TRUE,FALSE))],
collapse="; "))
}
generate_dataset_plot_gam = function(model){
cou_code=levels(droplevels (model$model$ser_cou_code))
do.call('rbind.data.frame',lapply(cou_code, function(cou){
year_range= range(model$model$das_year[model$model$ser_cou_code==cou],
na.rm=TRUE)
years=year_range[1]:year_range[2]
pred=predict(model,data.frame(das_year=years,ser_cou_code=cou), type = "response",
se.fit=TRUE)
data.frame(year=years,
cou_code=cou,
pred=pred$fit,
lower=pred$fit-1.96*pred$se.fit,
upper=pred$fit+1.96*pred$se.fit)
}))
}
query='SELECT
das_id,
das_value,
das_effort,
das_year,
das_comment,
ser_id,
cou_order,
ser_nameshort,
ser_area_division,
ser_qal_id,
ser_hty_code,
ser_emu_nameshort,
ser_uni_code,
ser_cou_code,
ser_comment,
sam_samplingtype,
ser_sam_id, ser_distanceseakm, ser_method, ser_sam_gear, ser_restocking,
das_qal_id,
das_last_update,
f_subarea,
lfs_code,
lfs_name
from datawg.t_dataseries_das
join datawg.t_series_ser on das_ser_id=ser_id
left join ref.tr_samplingtype_sam on ser_sam_id=sam_id
left join ref.tr_lifestage_lfs on ser_lfs_code=lfs_code
left join ref.tr_faoareas on ser_area_division=f_division
left join ref.tr_country_cou on cou_code=ser_cou_code
where ser_typ_id in (2,3) and das_value is not null and  (ser_qal_id IS NULL OR ser_qal_id IN (0,1,2,4)) and (das_qal_id IS NULL OR das_qal_id IN (1,2,4))'
mydata = dbGetQuery(con_wgeel,query)
mydata$ser_nameshort=as.factor(mydata$ser_nameshort)
mydata$ser_area_division=as.factor(mydata$ser_area_division)
mydata$f_subarea=as.factor(mydata$f_subarea)
mydata$lfs_code=as.factor(mydata$lfs_code)
mydata$ser_cou_code=as.factor(mydata$ser_cou_code)
mydata$ser_emu_nameshort=as.factor(mydata$ser_emu_nameshort)
mydata$lfs_name=as.factor(mydata$lfs_name)
mydata$ser_hty_code=as.factor(mydata$ser_hty_code)
# total number including those with only NULL value
nb_yellow = dbGetQuery(con_wgeel, "	SELECT count(*) FROM datawg.t_series_ser	WHERE  ser_typ_id in (2)") %>% pull()
nb_silver = dbGetQuery(con_wgeel, "	SELECT count(*) FROM datawg.t_series_ser	WHERE  ser_typ_id in (3)") %>% pull()
#sampling=read.table("sampling.csv",header=TRUE,sep=";")
sampling = dbGetQuery(con_wgeel, "SELECT ser_id,	ser_nameshort,	ser_comment,	sam_samplingtype,	ser_uni_code,	gea_name_en AS type FROM datawg.t_series_ser LEFT OUTER JOIN ref.tr_gear_gea ON (gea_id = ser_sam_gear)  LEFT OUTER JOIN ref.tr_samplingtype_sam ON (sam_id = ser_sam_id) WHERE ser_typ_id IN (2,3)")
mydata = merge(mydata,sampling[,c("ser_id","type")])
silver_dataall <- mydata %>%
filter(lfs_code=="S")
yellow_dataall <- mydata %>%
filter(lfs_code=="Y")
yellow_map=st_read(con_wgeel,query=paste("select ser_id,ser_x,ser_y,geom,ser_nameshort from datawg.t_series_ser where ser_id in (",
paste(unique(yellow_dataall$ser_id),collapse=","),")",sep=""))
yellow_map$Updated = yellow_map$ser_id %in% unique((mydata %>% filter(das_year >=2018) %>% select(ser_id) %>% pull()))
silver_map=st_as_sf(st_read(con_wgeel,query=paste("select ser_id,ser_x,ser_y,geom,ser_nameshort from datawg.t_series_ser where ser_id in (",
paste(unique(silver_dataall$ser_id),collapse=","),")",sep="")))
silver_map$Updated = silver_map$ser_id %in% unique((mydata %>% filter(das_year >=2018) %>% select(ser_id) %>% pull()))
# colors for countries
country_ref = dbGetQuery(con_wgeel, "SELECT cou_code, cou_country, cou_order FROM ref.tr_country_cou")
values=c(RColorBrewer::brewer.pal(12,"Set3"),
RColorBrewer::brewer.pal(12, "Paired"),
RColorBrewer::brewer.pal(8,"Accent"),
RColorBrewer::brewer.pal(8, "Dark2"))
color_countries = setNames(values,country_ref$cou_code)
dbDisconnect(con_wgeel)
colorpalette=cbf_1 <- c("red","black")
sf::sf_use_s2(FALSE)
worldmap <- ne_countries(scale = 'medium', type = 'map_units',
returnclass = 'sf')
europe_cropped <- st_crop(worldmap, xmin = -13, xmax = 27,
ymin = 35, ymax = 65)
my_map=get_stamenmap(bbox = c(left = -13, bottom = 35, right =
27, top = 65), zoom = 6, maptype = c("terrain-background"))
#watercolor
draw_key_text=
function (data, params, size)
{
if (is.null(data$label))
data$label <- "series"
grid::textGrob(data$label, 0.5, 0.5, rot = data$angle %||% 0, gp = gpar(cex = 2, col = alpha(data$colour %||%
data$fill %||% "black", data$alpha), fontfamily = data$family %||%
"", fontface = data$fontface %||% 1, fontsize = (data$size %||%
3.88) * .pt))
}
ggmap(my_map) +
geom_point(data=yellow_map,
aes(x=ser_x,y=ser_y,col=Updated),cex=2,pch=20)+
geom_label_repel(data=yellow_map,
aes(x=ser_x,y=ser_y,label=ser_nameshort,col=Updated),cex=1.5, key_glyph=draw_key_text, max.overlaps = Inf, label.padding = 0.1) +
#    scale_colour_discrete(labels = c('Women', 'Men'))
# scale_color_manual(label=Updated, values = colorpalette, breaks=) +
scale_color_manual("",values=colorpalette) +
ylab("") + xlab("")
ggplot(data = mtcars, aes(x = mpg, y = wt, color = factor(am) ) ) +
geom_point(aes(alpha = "Observed"), size = 3) +
geom_smooth(method = "lm", se = FALSE, aes(alpha = "Fitted") ) +
scale_alpha_manual(name = NULL,
values = c(1, 1),
breaks = c("Observed", "Fitted"),
guide = guide_legend(override.aes = list(linetype = c(0, 1),
shape = c(16, NA),
color = "black") ) )
ggplot(data = mtcars, aes(x = mpg, y = wt, color = factor(am) ) ) +
geom_point(aes(alpha = "Observed"), size = 3) +
geom_smooth(method = "lm", se = FALSE, aes(alpha = "Fitted") ) +
scale_alpha_manual(name = NULL,
values = c(1, 1),
breaks = c("Observed", "Fitted"),
guide = guide_legend(override.aes = list(linetype = c(0, 1),
shape = c(16, NA),
color = "black") ) )
ggmap(my_map) +
geom_point(data=yellow_map,
aes(x=ser_x,y=ser_y,col=Updated,alpha="Points"),cex=2,pch=20)+
geom_label_repel(data=yellow_map,
aes(x=ser_x,y=ser_y,label=ser_nameshort,col=Updated,alpha="Rectangles"),cex=1.5, key_glyph=draw_key_text, max.overlaps = Inf, label.padding = 0.1) +
scale_color_manual("",values=colorpalette) +
scale_alpha_manual(name = NULL,
values = c(1, 1),
breaks = c("Points", "Rectangles"),
guide = guide_legend(override.aes = list(linetype = c(0, 1),
shape = c(16, NA),
color = "black") ) )
ylab("") + xlab("")
ggmap(my_map) +
geom_point(data=yellow_map,
aes(x=ser_x,y=ser_y,col=Updated,alpha="Points"),cex=2,pch=20)+
geom_label_repel(data=yellow_map,
aes(x=ser_x,y=ser_y,label=ser_nameshort,col=Updated,alpha="Rectangles"),cex=1.5, key_glyph=draw_key_text, max.overlaps = Inf, label.padding = 0.1) +
scale_color_manual("",values=colorpalette,breaks= c("Points", "Rectangles"))
?geom_point
ggmap(my_map) +
geom_point(data=yellow_map,
aes(x=ser_x,y=ser_y,col=Updated),cex=2,pch=20)+
geom_label_repel(data=yellow_map,
aes(x=ser_x,y=ser_y,label=ser_nameshort,col=Updated,show.legend=FALSE),cex=1.5, key_glyph=draw_key_text, max.overlaps = Inf, label.padding = 0.1) +
scale_color_manual("",values=colorpalette)
ggmap(my_map) +
geom_point(data=yellow_map,
aes(x=ser_x,y=ser_y,col=Updated),cex=2,pch=20)+
geom_label_repel(data=yellow_map,
aes(x=ser_x,y=ser_y,label=ser_nameshort,col=Updated),show.legend=FALSE ,cex=1.5, key_glyph=draw_key_text, max.overlaps = Inf, label.padding = 0.1) +
scale_color_manual("",values=colorpalette)
ggmap(my_map) +
geom_point(data=yellow_map,
aes(x=ser_x,y=ser_y,col=Updated),cex=2,pch=20)+
geom_label_repel(data=yellow_map,
aes(x=ser_x,y=ser_y,label=ser_nameshort,col=Updated),show.legend=FALSE ,cex=1.5, key_glyph=draw_key_text, max.overlaps = Inf, label.padding = 0.1) +
scale_color_manual("",values=colorpalette)
?scale_color_manual
ggmap(my_map) +
geom_point(data=yellow_map,
aes(x=ser_x,y=ser_y,col=Updated),cex=2,pch=20)+
geom_label_repel(data=yellow_map,
aes(x=ser_x,y=ser_y,label=ser_nameshort,col=Updated),show.legend=FALSE ,cex=1.5, key_glyph=draw_key_text, max.overlaps = Inf, label.padding = 0.1) +
scale_color_manual("",values=colorpalette,breaks=c(TRUE="Updated",FALSE="Not updated"))
ggmap(my_map) +
geom_point(data=yellow_map,
aes(x=ser_x,y=ser_y,col=Updated),cex=2,pch=20)+
geom_label_repel(data=yellow_map,
aes(x=ser_x,y=ser_y,label=ser_nameshort,col=Updated),show.legend=FALSE ,cex=1.5, key_glyph=draw_key_text, max.overlaps = Inf, label.padding = 0.1) +
scale_color_manual("",values=colorpalette,breaks=c(TRUE=="Updated",FALSE=="Not updated"))
colorpalette
rev(colorpalette)
ggmap(my_map) +
geom_point(data=yellow_map,
aes(x=ser_x,y=ser_y,col=Updated),cex=2,pch=20)+
geom_label_repel(data=yellow_map,
aes(x=ser_x,y=ser_y,label=ser_nameshort,col=Updated),show.legend=FALSE ,cex=1.5, key_glyph=draw_key_text, max.overlaps = Inf, label.padding = 0.1) +
scale_color_manual("",values=rev(colorpalette),breaks=c(TRUE=="Updated",FALSE=="Not updated"))
ggmap(my_map) +
geom_point(data=yellow_map,
aes(x=ser_x,y=ser_y,col=Updated),cex=2,pch=20)+
geom_label_repel(data=yellow_map,
aes(x=ser_x,y=ser_y,label=ser_nameshort,col=Updated),show.legend=FALSE ,cex=1.5, key_glyph=draw_key_text, max.overlaps = Inf, label.padding = 0.1) +
scale_color_manual("",values=rev(colorpalette))
ggmap(my_map) +
geom_point(data=yellow_map,
aes(x=ser_x,y=ser_y,col=Updated),cex=2,pch=20)+
geom_label_repel(data=yellow_map,
aes(x=ser_x,y=ser_y,label=ser_nameshort,col=Updated),show.legend=FALSE ,cex=1.5, key_glyph=draw_key_text, max.overlaps = Inf, label.padding = 0.1) +
scale_color_manual("",values=colorpalette)
ggmap(my_map) +
geom_point(data=yellow_map,
aes(x=ser_x,y=ser_y,col=Updated),cex=2,pch=20)+
geom_label_repel(data=yellow_map,
aes(x=ser_x,y=ser_y,label=ser_nameshort,col=Updated),show.legend=FALSE ,cex=1.5, key_glyph=draw_key_text, max.overlaps = Inf, label.padding = 0.1) +
scale_color_manual("",values=c(TRUE="black",FALSE="red"))
ggmap(my_map) +
geom_point(data=yellow_map,
aes(x=ser_x,y=ser_y,col=Updated),cex=2,pch=20)+
geom_label_repel(data=yellow_map,
aes(x=ser_x,y=ser_y,label=ser_nameshort,col=Updated),show.legend=FALSE ,cex=1.5, key_glyph=draw_key_text, max.overlaps = Inf, label.padding = 0.1) +
scale_color_manual("",values=c(TRUE="black",FALSE="red"))
ggmap(my_map) +
geom_point(data=yellow_map,
aes(x=ser_x,y=ser_y,col=Updated),cex=2,pch=20)+
geom_label_repel(data=yellow_map,
aes(x=ser_x,y=ser_y,label=ser_nameshort,col=Updated),show.legend=FALSE ,cex=1.5, key_glyph=draw_key_text, max.overlaps = Inf, label.padding = 0.1) +
scale_color_manual("",values=c("TRUE"="black","FALSE"="red"))
ggmap(my_map) +
geom_point(data=yellow_map,
aes(x=ser_x,y=ser_y,col=Updated),cex=2,pch=20)+
geom_label_repel(data=yellow_map,
aes(x=ser_x,y=ser_y,label=ser_nameshort,col=Updated),show.legend=FALSE ,cex=1.5, key_glyph=draw_key_text, max.overlaps = Inf, label.padding = 0.1) +
scale_color_manual("",values=c("TRUE"="black","FALSE"="red"),breaks=c(TRUE,FALSE),labels=c("Updated","Not updated"))
ggmap(my_map) +
geom_point(data=yellow_map,
aes(x=ser_x,y=ser_y,col=Updated),cex=2,pch=20)+
geom_label_repel(data=yellow_map,
aes(x=ser_x,y=ser_y,label=ser_nameshort,col=Updated),show.legend=FALSE ,cex=1.5, key_glyph=draw_key_text, max.overlaps = Inf, label.padding = 0.1) +
scale_color_manual("",values=c("TRUE"="black","FALSE"="red"),breaks=c(TRUE,FALSE),
labels=c("Updated","Not updated")) +
ylab("") + xlab("")
worldmap <- ne_countries(scale = 'medium', type = 'map_units',
returnclass = 'sf')
europe_cropped <- st_crop(worldmap, xmin = -13, xmax = 27,
ymin = 35, ymax = 65)
my_map=get_stamenmap(bbox = c(left = -13, bottom = 35, right =
27, top = 65), zoom = 6, maptype = c("terrain-background"))
#watercolor
draw_key_text=
function (data, params, size)
{
if (is.null(data$label))
data$label <- "series"
grid::textGrob(data$label, 0.5, 0.5, rot = data$angle %||% 0, gp = gpar(cex = 2, col = alpha(data$colour %||%
data$fill %||% "black", data$alpha), fontfamily = data$family %||%
"", fontface = data$fontface %||% 1, fontsize = (data$size %||%
3.88) * .pt))
}
ggmap(my_map) +
geom_point(data=silver_map,
aes(x=ser_x,y=ser_y),cex=2,pch=20, col  = "red")+
geom_label_repel(data=silver_map,
aes(x=ser_x,y=ser_y,label=ser_nameshort,col=Updated),cex=1.5, key_glyph=draw_key_text, max.overlaps = Inf, label.padding = 0.1) +
scale_color_manual("Updated",values=colorpalette)+
ylab("")+xlab("")
#knitr::include_graphics("images/silver.png")
ggmap(my_map) +
geom_point(data=silver_map,
aes(x=ser_x,y=ser_y,col=Updated),cex=2,pch=20)+
geom_label_repel(data=silver_map,
aes(x=ser_x,y=ser_y,label=ser_nameshort,col=Updated),show.legend=FALSE ,cex=1.5, key_glyph=draw_key_text, max.overlaps = Inf, label.padding = 0.1) +
scale_color_manual("",values=c("TRUE"="black","FALSE"="red"),breaks=c(TRUE,FALSE),
labels=c("Updated","Not updated")) +
ylab("") + xlab("")
ggmap(my_map) +
geom_point(data=silver_map,
aes(x=ser_x,y=ser_y,col=Updated),cex=2,pch=20)+
geom_label_repel(data=silver_map,
aes(x=ser_x,y=ser_y,label=ser_nameshort,col=Updated),show.legend=FALSE ,cex=1.5, key_glyph=draw_key_text, max.overlaps = Inf, label.padding = 0.1) +
scale_color_manual("",values=c("TRUE"="black","FALSE"="red"),breaks=c(TRUE,FALSE),
labels=c("Updated","Not updated")) +
ylab("") + xlab("")
library(MARSS)
library(abind)
detach("package:abind", unload = TRUE)
install.packages("MARSS")
library(MARSS)
library(MARSS)
load_library("gridExtra")
# r-packages
library(MARSS)
library("gridExtra")
library("xtable")
library("getPass")
library("RPostgres")
library("sf")
library("flextable")
library("broom")
library("eulerr")
library("dplyr")
library("knitr")
library("ggplot2")
library("ggmap")
library("tidyverse")
library("rnaturalearth")
library("parallel")
library("kableExtra")
library("mgcv")
library("ggmap")
library("ggrepel")
library("grid")
library(yaml)
cred=read_yaml("../../credentials.yml")
getwd()
cred=read_yaml("../../credentials.yml")
cred=read_yaml("../../credentials.yml")
cred=read_yaml("../credentials.yml")
cred=read_yaml("credentials.yml")
con_wgeel = dbConnect(Postgres(), dbname=cred$dbname,host=cred$host,port=cred$port,user=cred$user, password=getPass())
con_wgeel = dbConnect(Postgres(), dbname=cred$dbname,host=cred$host,port=cred$port,user=cred$user, password=getPass())
query='SELECT
das_id,
das_value,
das_effort,
das_year,
das_comment,
ser_id,
cou_order,
ser_nameshort,
ser_area_division,
ser_qal_id,
ser_hty_code,
ser_emu_nameshort,
ser_uni_code,
ser_cou_code,
ser_comment,
sam_samplingtype,
ser_sam_id, ser_distanceseakm, ser_method, ser_sam_gear, ser_restocking,
das_qal_id,
das_last_update,
f_subarea,
lfs_code,
lfs_name
from datawg.t_dataseries_das
join datawg.t_series_ser on das_ser_id=ser_id
left join ref.tr_samplingtype_sam on ser_sam_id=sam_id
left join ref.tr_lifestage_lfs on ser_lfs_code=lfs_code
left join ref.tr_faoareas on ser_area_division=f_division
left join ref.tr_country_cou on cou_code=ser_cou_code
where ser_typ_id in (2,3) and das_value is not null and  (ser_qal_id IS NULL OR ser_qal_id IN (0,1,2,4)) and (das_qal_id IS NULL OR das_qal_id IN (1,2,4))'
mydata = dbGetQuery(con_wgeel,query)
mydata
names(mydata)
mydata$ser_nameshort=as.factor(mydata$ser_nameshort)
mydata$ser_area_division=as.factor(mydata$ser_area_division)
mydata$f_subarea=as.factor(mydata$f_subarea)
mydata$lfs_code=as.factor(mydata$lfs_code)
mydata$ser_cou_code=as.factor(mydata$ser_cou_code)
mydata$ser_emu_nameshort=as.factor(mydata$ser_emu_nameshort)
mydata$lfs_name=as.factor(mydata$lfs_name)
mydata$ser_hty_code=as.factor(mydata$ser_hty_code)
nb_yellow = dbGetQuery(con_wgeel, "	SELECT count(*) FROM datawg.t_series_ser	WHERE  ser_typ_id in (2)") %>% pull()
nb_silver = dbGetQuery(con_wgeel, "	SELECT count(*) FROM datawg.t_series_ser	WHERE  ser_typ_id in (3)") %>% pull()
sampling = dbGetQuery(con_wgeel, "SELECT ser_id,	ser_nameshort,	ser_comment,	sam_samplingtype,	ser_uni_code,	gea_name_en AS type FROM datawg.t_series_ser LEFT OUTER JOIN ref.tr_gear_gea ON (gea_id = ser_sam_gear)  LEFT OUTER JOIN ref.tr_samplingtype_sam ON (sam_id = ser_sam_id) WHERE ser_typ_id IN (2,3)")
mydata = merge(mydata,sampling[,c("ser_id","type")])
cred=read_yaml("credentials.yml") # credentials
# connect to
con_wgeel = dbConnect(Postgres(), dbname=cred$dbname,host=cred$host,port=cred$port,user=cred$user, password=getPass())
# load data
query='SELECT
das_id,
das_value,
das_effort,
das_year,
das_comment,
ser_id,
cou_order,
ser_nameshort,
ser_area_division,
ser_qal_id,
ser_hty_code,
ser_emu_nameshort,
ser_uni_code,
ser_cou_code,
ser_comment,
sam_samplingtype,
ser_sam_id, ser_distanceseakm, ser_method, ser_sam_gear, ser_restocking,
das_qal_id,
das_last_update,
f_subarea,
lfs_code,
lfs_name
from datawg.t_dataseries_das
join datawg.t_series_ser on das_ser_id=ser_id
left join ref.tr_samplingtype_sam on ser_sam_id=sam_id
left join ref.tr_lifestage_lfs on ser_lfs_code=lfs_code
left join ref.tr_faoareas on ser_area_division=f_division
left join ref.tr_country_cou on cou_code=ser_cou_code
where ser_typ_id in (2,3) and das_value is not null and  (ser_qal_id IS NULL OR ser_qal_id IN (0,1,2,4)) and (das_qal_id IS NULL OR das_qal_id IN (1,2,4))'
mydata = dbGetQuery(con_wgeel,query)
# make factors
mydata$ser_nameshort=as.factor(mydata$ser_nameshort)
mydata$ser_area_division=as.factor(mydata$ser_area_division)
mydata$f_subarea=as.factor(mydata$f_subarea)
mydata$lfs_code=as.factor(mydata$lfs_code)
mydata$ser_cou_code=as.factor(mydata$ser_cou_code)
mydata$ser_emu_nameshort=as.factor(mydata$ser_emu_nameshort)
mydata$lfs_name=as.factor(mydata$lfs_name)
mydata$ser_hty_code=as.factor(mydata$ser_hty_code)
# total number including those with only NULL value
nb_yellow = dbGetQuery(con_wgeel, "	SELECT count(*) FROM datawg.t_series_ser	WHERE  ser_typ_id in (2)") %>% pull()
nb_silver = dbGetQuery(con_wgeel, "	SELECT count(*) FROM datawg.t_series_ser	WHERE  ser_typ_id in (3)") %>% pull()
#sampling=read.table("sampling.csv",header=TRUE,sep=";")
sampling = dbGetQuery(con_wgeel, "SELECT ser_id,	ser_nameshort,	ser_comment,	sam_samplingtype,	ser_uni_code,	gea_name_en AS type FROM datawg.t_series_ser LEFT OUTER JOIN ref.tr_gear_gea ON (gea_id = ser_sam_gear)  LEFT OUTER JOIN ref.tr_samplingtype_sam ON (sam_id = ser_sam_id) WHERE ser_typ_id IN (2,3)")
mydata = merge(mydata,sampling[,c("ser_id","type")])
mydata
mydata$ser_area_division
mydata$lfs_code
nb_yellow
RShowDoc("Chapter_SealPopStructure.R",package="MARSS")
RShowDoc("Chapter_SealPopStructure.R",package="MARSS")
?harborSeal
data("harborSeal")
harborSeal
data("harborSeal")
harborSeal
Z1 <- factor(c("wa.or", "wa.or", rep("ps", 4),
"ca", "ca", "wa.or", "wa.or", "bc"))
Z1
years <- harborSeal[, 1] # first col is years
# leave off Hood Canal data for now
sealData <- t(harborSeal[, c(2:7, 9:13)])
sealData
data("harborSeal")
harborSeal
years <- harborSeal[, 1] # first col is years
# leave off Hood Canal data for now
sealData <- t(harborSeal[, c(2:7, 9:13)])
# H1 stock
Z1 <- factor(c("wa.or", "wa.or", rep("ps", 4),
"ca", "ca", "wa.or", "wa.or", "bc"))
# H2 coastal+PS
Z2 <- factor(c(rep("coast", 2), rep("ps", 4), rep("coast", 4), "ps"))
# H3 N and S
Z3 <- factor(c(rep("N", 6), "S", "S", "N", "S", "N"))
# H4 North Coast, Inland Strait, Puget Sound, South Coast
Z4 <- factor(c("nc", "nc", "is", "is", "ps", "ps",
"sc", "sc", "nc", "sc", "is"))
# H5 panmictic
Z5 <- factor(rep("pan", 11))
# H6 Site
Z6 <- factor(1:11) # site
Z.models <- list(Z1, Z2, Z3, Z4, Z5, Z6)
names(Z.models) <-
c("stock", "coast+PS", "N-S", "NC+Strait+PS+SC", "panmictic", "site")
# test with different Q models(i.e. different process errors)
Q.models <- c("diagonal and equal", "diagonal and unequal")
# Model parameters(the same across  all models)
U.model <- "unequal"
R.model <- "diagonal and equal"
A.model <- "scaling"
B.model <- "identity"
x0.model <- "unequal"
V0.model <- "zero"
model.constant <- list(
U = U.model, R = R.model, A = A.model,
x0 = x0.model, V0 = V0.model, tinitx = 0
)
out.tab <- NULL
fits <- list()
for (i in 1:length(Z.models)) {
for (Q.model in Q.models) {
fit.model <- c(list(Z = Z.models[[i]], Q = Q.model), model.constant)
fit <- MARSS(sealData,
model = fit.model,
silent = TRUE, control = list(maxit = 1000)
)
out <- data.frame(
H = names(Z.models)[i], Q = Q.model, U = U.model,
logLik = fit$logLik, AICc = fit$AICc, num.param = fit$num.params,
m = length(unique(Z.models[[i]])),
num.iter = fit$numIter, converged = !fit$convergence,
stringsAsFactors = FALSE
)
out.tab <- rbind(out.tab, out)
fits <- c(fits, list(fit))
if (i == 5) next # one m for panmictic so only run 1 Q
}
}
out.rab
out.tab
min.AICc <- order(out.tab$AICc)
out.tab.1 <- out.tab[min.AICc, ]
min.AICc
out.tab.1
out.tab.1 <- cbind(out.tab.1,
delta.AICc = out.tab.1$AICc - out.tab.1$AICc[1]
)
out.tab.1
out.tab.1 <- cbind(out.tab.1,
rel.like = exp(-1 * out.tab.1$delta.AICc / 2)
)
out.tab.1
#The AIC weight for a model is its relative likelihood divided by the sum of all the relative likelihoods.
out.tab.1 <- cbind(out.tab.1,
AIC.weight = out.tab.1$rel.like / sum(out.tab.1$rel.like)
)
out.tab.1
